1. Pod
A Pod is the smallest deployable unit in Kubernetes, representing one or more containers.

Manifest with Liveness and Readiness Probes:
yaml
Copy
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
  labels:
    app: nginx
    env: prod
spec:
  containers:
  - name: nginx
    image: nginx:latest
    ports:
    - containerPort: 80
    livenessProbe:
      httpGet:
        path: /
        port: 80
      initialDelaySeconds: 5
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: /
        port: 80
      initialDelaySeconds: 5
      periodSeconds: 10
2. ReplicationController
Ensures a specified number of pod replicas are running.

Manifest:
yaml
Copy
apiVersion: v1
kind: ReplicationController
metadata:
  name: nginx-rc
spec:
  replicas: 3
  selector:
    app: nginx
  template:
    metadata:
      labels:
        app: nginx
        env: prod
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
3. ReplicaSet
Ensures a specified number of pod replicas are running.

Manifest:
yaml
Copy
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: nginx-rs
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
        env: prod
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
4. Deployment
Manages the deployment lifecycle of Pods and ReplicaSets.

Manifest with Rolling Update Strategy:
yaml
Copy
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
        env: prod
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
5. StatefulSet
Manages stateful applications with stable network identities and persistent storage.

Manifest:
yaml
Copy
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nginx-statefulset
spec:
  serviceName: "nginx"
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
        env: prod
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
6. Services
Exposes Pods to network traffic.

NodePort Service:
yaml
Copy
apiVersion: v1
kind: Service
metadata:
  name: nginx-nodeport
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30001
  type: NodePort
ClusterIP Service:
yaml
Copy
apiVersion: v1
kind: Service
metadata:
  name: nginx-clusterip
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
LoadBalancer Service:
yaml
Copy
apiVersion: v1
kind: Service
metadata:
  name: nginx-loadbalancer
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
7. Ingress
Manages HTTP(S) routing to services.

Real-Time Example:
yaml
Copy
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: nginx.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-clusterip
            port:
              number: 80
8. ResourceQuota
Limits resource consumption within a namespace.

Manifest:
yaml
Copy
apiVersion: v1
kind: ResourceQuota
metadata:
  name: nginx-quota
spec:
  hard:
    requests.cpu: "4"
    requests.memory: 4Gi
    limits.cpu: "8"
    limits.memory: 8Gi
9. Volumes
Provides persistent storage for containers.

Manifest:
yaml
Copy
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod-with-volume
spec:
  containers:
  - name: nginx
    image: nginx:latest
    ports:
    - containerPort: 80
    volumeMounts:
    - mountPath: /usr/share/nginx/html
      name: nginx-volume
  volumes:
  - name: nginx-volume
    emptyDir: {}
10. PersistentVolume (PV) and PersistentVolumeClaim (PVC)
Manages persistent storage.

PersistentVolume:
yaml
Copy
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nginx-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: standard
  hostPath:
    path: "/mnt/data/nginx"
PersistentVolumeClaim:
yaml
Copy
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nginx-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard
Additional Features
1. Node Selector
Assigns Pods to specific nodes based on labels.

yaml
Copy
spec:
  nodeSelector:
    disktype: ssd
2. Node Affinity
Advanced node selection using affinity rules.

yaml
Copy
spec:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: disktype
            operator: In
            values:
            - ssd
3. Taints and Tolerations
Prevents Pods from being scheduled on specific nodes unless they tolerate the taint.

Taint a Node:
bash
Copy
kubectl taint nodes node1 key=value:NoSchedule
Add Toleration to Pod:
yaml
Copy
spec:
  tolerations:
  - key: "key"
    operator: "Equal"
    value: "value"
    effect: "NoSchedule"
4. Deployment Strategies
Recreate: Terminates old Pods before creating new ones.

RollingUpdate: Gradually replaces old Pods with new ones.

yaml
Copy
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1
    maxSurge: 1
Kubernetes Architecture
Master Node:

API Server

Scheduler

Controller Manager

etcd (Key-Value Store)

Worker Node:

Kubelet

Kube Proxy

Container Runtime (e.g., Docker)

Real-Time Example: Ingress with TLS
yaml
Copy
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress-tls
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - nginx.example.com
    secretName: nginx-tls-secret
  rules:
  - host: nginx.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-clusterip
            port:
              number: 80
This comprehensive guide covers all the requested Kubernetes features with real-time examples and detailed manifests. Let me know if you need further clarification!
